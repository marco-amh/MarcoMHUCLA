print(c(sd_SSE_inf,sd_SSE,sd_SSE_up))
curve(dchisq(x, df = n-k+1), from = 0, to = 20, n = 5000, col= 'blue', lwd=2, add = F)
p_value <- pchisq(sd_SSE,n-k+1)
qchisq(p_value,n-k+1)
#F test for variances
F_calc_var <- var_SSR/var_SSE
F_calc <- (R2/(k-1))/((1-R2)/(n-k))
F_crit <- qf(0.95,n-k,k-1)
curve(df(x, df1 = n-k, df2 = k-1), from = 0, to = 10, n = 5000, col= 'blue', lwd=2, add = F,
main="F-Test ANOVA",sub = "Ho: All parameters equal to zero", xlab="F-Distribution. Compare Two Variances")
abline(v=F_crit, col="black",lwd=2)
abline(v=F_calc, col="red",lwd=2)
legend("topright", c("F critical","F calculated"),fill=c("black","red"),bty='n')
print(data$Results)
print("The F-test is to compare two variances: the variance of the SSRegression and the SSErrors. If we
get a high F-calculated value is sign that the y variable is well explained by the model. Hence,
we set the Null Hypothesis that all coefficients equal to zero, Ho: b1=b2...=bk=0. We aim to
reject Ho")
}
sum_ols(results_ols)
data <- results_ols
data
k <- length(data$Results)
n <- length(data$Fitted)
res <-data$Residuals
fitted <- data$Fitted
Y <- data$y
Y
log_lik <- (-n/2)*(1+log(2*pi)+log(sum(res^2)/n))
AIC <- (-2*log_lik)/n+(2*k/n) #Akaike Information Criteria
Schwarz <- (-2*log_lik)/n+((k*log(n))/n)
HC <- (-2*log_lik)/n+((2*k*log(log(n))/n)) #Hanna Quinn
se_reg <- res^2
se_reg <- res^2
#ANOVA table
SSR <- sum((fitted-mean(Y))^2)
SSE <- sum(res^2)
SST <- sum((Y-mean(Y))^2)
var_SSR <- SSR/(k-1)
var_SSE <- SSE/(n-k)
var_SST <- SST/(n-1)
sd_SSR <- var_SSR^(1/2)
sd_SSE <- var_SSE^(1/2)
sd_SST <- var_SST^(1/2)
#R^2
R2 <- SSR/SST
R2_adj <- 1-((1-R2)*(n-1)/(n-k))
Corr_mult <- R2^(1/2)
#Confidence Interval for residual variance
#The variance follows a Chi-Square distribution
#$X^2_(n-k+1)=frac\(n-k+1)s^2}{\sigma^2}$
sd_SSE_inf <- (((n-k+1)*var_SSE)/qchisq(0.05,n-k+1))^(1/2)
sd_SSE_up  <- (((n-k+1)*var_SSE)/qchisq(0.95,n-k+1))^(1/2)
print(c(sd_SSE_inf,sd_SSE,sd_SSE_up))
curve(dchisq(x, df = n-k+1), from = 0, to = 20, n = 5000, col= 'blue', lwd=2, add = F)
p_value <- pchisq(sd_SSE,n-k+1)
qchisq(p_value,n-k+1)
#F test for variances
F_calc_var <- var_SSR/var_SSE
F_calc <- (R2/(k-1))/((1-R2)/(n-k))
F_crit <- qf(0.95,n-k,k-1)
curve(df(x, df1 = n-k, df2 = k-1), from = 0, to = 10, n = 5000, col= 'blue', lwd=2, add = F,
main="F-Test ANOVA",sub = "Ho: All parameters equal to zero", xlab="F-Distribution. Compare Two Variances")
abline(v=F_crit, col="black",lwd=2)
abline(v=F_calc, col="red",lwd=2)
legend("topright", c("F critical","F calculated"),fill=c("black","red"),bty='n')
print(data$Results)
print("The F-test is to compare two variances: the variance of the SSRegression and the SSErrors. If we
get a high F-calculated value is sign that the y variable is well explained by the model. Hence,
we set the Null Hypothesis that all coefficients equal to zero, Ho: b1=b2...=bk=0. We aim to
reject Ho")
F_calc
lag(Money_d[,1],1:3)
lag(Money_d[,1],1:3)
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
install.packages("xfun")
install.packages("tinytex")
update.packages("xfun")
update.packages(xfun)
update.packages("xfun")
library(xfun)
remove.packages("xfun", lib="~/R/win-library/4.0")
install.packages("xfun")
install.packages("xfun")
library(xfun)
install.packages("xfun")
library(xfun)
ols_se_white <-function(data_ols){
#Create matrices for variables
Y <- matrix(0,nrow(data_ols),1)
X <- matrix(0,nrow(data_ols),ncol(data_ols))
#Define dependent variable
Y <- data_ols[,1]
#Vector of constants
X[,1] <- 1
#Fill the matrix with independent variables
for (i in 2:ncol(data_ols)){
X[,i] <- data_ols[,i]
}
colnames(X)[2:ncol(data_ols)] <- names(data_ols)[2:ncol(data_ols)]
colnames(X)[1] <- c("intercept")
#Number of observations
n <- nrow(X)
#Number of parameters
k <- ncol(X)
#####
#OLS matrix form
#####
#\hat \y=(X'X)^{-1}X'Y
#Solving the matrix
coef <-t(solve(t(X)%*%X)%*%t(X)%*%Y)
rownames(coef) <- c("Coefficients") #Rename
#Vector to store y_hat
Y_hat <- matrix(NA,n,k)
#Loop for y_hat
for (i in 1:k){
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
}
# Create time
#t <- seq(from=start, to=end, by=factor)
######
# Calculate Y_hat for time/individual
#####
Y_hat <- apply(Y_hat, MARGIN = 1, sum)
#####
# Plot y_obs, y_hat and residuals
#####
# Fitted values
par(mfcol=c(1,2))
plot(Y_hat, type="line", main="Fitted vs Observed values", col="red")
lines(data_ols[,1], type="line", col="black")
legend("topleft",c("Fitted","Observed"),fill=c("red","black"),bty='n')
#Residuals
res <- Y-Y_hat
plot(res, type="line", main="Residuals")
#####
# Variance covariance matrix
#####
#Var(\hat \beta)|X)=1-(n-k) \hat \epsilon ' \hat \epsilon(X'X)^{-1}
VCV <- (1/(n-k))*as.numeric(t(res)%*%res)*solve(t(X)%*%X)
#Diagonal matrix variance-covariance
se <- t(as.matrix(sqrt(diag(VCV))))
rownames(se) <- c("s.e.") #rename
#####
# t-values
#####
t_value <- coef/se
rownames(t_value) <- c("t-value") #rename
#Robust Variance covariance matrix
white_var <- (diag(VCV))*(n/(n-k-1))
#Robust White S.E.
white_se <-(white_var)
## p-value with White s.e.
white_p_value <- coef/white_se
# Bind main results
results <-rbind(coef, white_se, white_p_value)
list_results <- list("Results" = results, "Residuals" = res, "Fitted" = Y_hat, "y"=Y)
return(list_results)
}
results_ols <- ols(data_ols=uclanomics::Money_demand[2:5])
results_ols <- ols_se_white(data_ols=uclanomics::Money_demand[2:5])
results_ols$Results
ols_se_white <-function(data_ols){
#Create matrices for variables
Y <- matrix(0,nrow(data_ols),1)
X <- matrix(0,nrow(data_ols),ncol(data_ols))
#Define dependent variable
Y <- data_ols[,1]
#Vector of constants
X[,1] <- 1
#Fill the matrix with independent variables
for (i in 2:ncol(data_ols)){
X[,i] <- data_ols[,i]
}
colnames(X)[2:ncol(data_ols)] <- names(data_ols)[2:ncol(data_ols)]
colnames(X)[1] <- c("intercept")
#Number of observations
n <- nrow(X)
#Number of parameters
k <- ncol(X)
#####
#OLS matrix form
#####
#\hat \y=(X'X)^{-1}X'Y
#Solving the matrix
coef <-t(solve(t(X)%*%X)%*%t(X)%*%Y)
rownames(coef) <- c("Coefficients") #Rename
#Vector to store y_hat
Y_hat <- matrix(NA,n,k)
#Loop for y_hat
for (i in 1:k){
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
Y_hat[,i] <- (X[,i]*coef[,i])
}
# Create time
#t <- seq(from=start, to=end, by=factor)
######
# Calculate Y_hat for time/individual
#####
Y_hat <- apply(Y_hat, MARGIN = 1, sum)
#####
# Plot y_obs, y_hat and residuals
#####
# Fitted values
par(mfcol=c(1,2))
plot(Y_hat, type="line", main="Fitted vs Observed values", col="red")
lines(data_ols[,1], type="line", col="black")
legend("topleft",c("Fitted","Observed"),fill=c("red","black"),bty='n')
#Residuals
res <- Y-Y_hat
plot(res, type="line", main="Residuals")
#####
# Variance covariance matrix
#####
#Var(\hat \beta)|X)=1-(n-k) \hat \epsilon ' \hat \epsilon(X'X)^{-1}
VCV <- (1/(n-k))*as.numeric(t(res)%*%res)*solve(t(X)%*%X)
#Diagonal matrix variance-covariance
se <- t(as.matrix(sqrt(diag(VCV))))
rownames(se) <- c("s.e.") #rename
#####
# t-values
#####
#Robust Variance covariance matrix
white_var <- (diag(VCV))*(n/(n-k-1))
#Robust White S.E.
white_se <-(white_var)
## t-value with White s.e.
white_t_value <- coef/white_se
rownames(white_t_value) <- c("t-value") #rename
# Bind main results
results <-rbind(coef, white_se, white_t_value)
list_results <- list("Results" = results, "Residuals" = res, "Fitted" = Y_hat, "y"=Y)
return(list_results)
}
results_ols <- ols_se_white(data_ols=uclanomics::Money_demand[2:5])
results_ols$Results
boots <- function(B, data){
set.seed(81)
boot_coeff <- matrix(NA,B,1)
for (i in 1:B){
data_boot <- data[sample(nrow(data), nrow(data), replace=T),  ]
boot_coeff[i,] <- cor(data_boot[,1],data_boot[,2])
}
hist(boot_coeff, xlab="Coefficient", main=paste0("Bootstrapped Correlation"),
breaks="FD",col="gray")
abline(v=quantile(boot_coeff, 0.5),col="red", lwd=2,lty=1)
abline(v=quantile(boot_coeff, 0.025),col="red", lwd=2,lty=2)
abline(v=quantile(boot_coeff, 0.975),col="red", lwd=2, lty=2)
abline(v=cor(data[,1],data[,2]) ,col="blue", lwd=2, lty=2)
}
boots <- function(B, data){
set.seed(81)
boot_coeff <- matrix(NA,B,1)
for (i in 1:B){
data_boot <- data[sample(nrow(data), nrow(data), replace=T),  ]
boot_coeff[i,] <- cor(data_boot[,1],data_boot[,2])
}
hist(boot_coeff, xlab="Coefficient", main=paste0("Bootstrapped Correlation"),
breaks="FD",col="gray")
abline(v=quantile(boot_coeff, 0.5),col="red", lwd=2,lty=1)
abline(v=quantile(boot_coeff, 0.025),col="red", lwd=2,lty=2)
abline(v=quantile(boot_coeff, 0.975),col="red", lwd=2, lty=2)
abline(v=cor(data[,1],data[,2]) ,col="blue", lwd=2, lty=2)
}
devtools::document()
devtools::document()
devtools::document()
library(usethis)
library(devtools)
devtools::document()
devtools::document()
block_boots <- function(k, B, data){
#k <- 12 #size of blocks
#B <- 100000 #number of bootstraps
set.seed(81)
n <- nrow(data) #sample size
s <- ceiling(n/k) #number of blocks in each bootstraps
# Matrix to store the results
boot_coeff <- matrix(NA,B,1)
# Loop for block bootstrapping
for(i in 1:B) {
tmp <- matrix(NA,s*k, ncol(data))
for(j in 1:s){
t <- sample(k:n, size=1) #last point of time
tmp[(j-1)*k+1:k,] <-  data[t-(k:1)+1,] #fill the boots vector with observations in a block
}
tmp <- tmp[1:n,]
boot_coeff[i,] <- cor(tmp[,1],tmp[,2])
if(i%%1000==0) print(i)
}
#----
# Histogram
#----
hist(boot_coeff, xlab="Coefficient", main=paste0("Block Bootstrapped Correlation"),
breaks="FD",col="gray")
abline(v=quantile(boot_coeff, 0.5),col="red", lwd=2,lty=1)
abline(v=quantile(boot_coeff, 0.025),col="red", lwd=2,lty=2)
abline(v=quantile(boot_coeff, 0.975),col="red", lwd=2, lty=2)
abline(v=cor(data[,1],data[,2]) ,col="blue", lwd=2, lty=2)
return(list(mean(boot_coeff),quantile(boot_coeff, 0.5),quantile(boot_coeff, 0.025),quantile(boot_coeff, 0.975)))
}
block_boots(k=2, B=10000, data=Money_demand[,2:3])
block_boots(k=2, B=10000, data=uclanomics::Money_demand[,2:3])
Money_demand[,2:3]
uclanomics::Money_demand[,2:3]
block_boots <- function(k, B, data){
#k <- 12 #size of blocks
#B <- 100000 #number of bootstraps
set.seed(81)
n <- nrow(data) #sample size
s <- ceiling(n/k) #number of blocks in each bootstraps
# Matrix to store the results
boot_coeff <- matrix(NA,B,1)
# Loop for block bootstrapping
for(i in 1:B) {
tmp <- matrix(NA,s*k, ncol(data))
for(j in 1:s){
t <- sample(k:n, size=1) #last point of time
tmp[(j-1)*k+1:k,] <-  data[t-(k:1)+1,] #fill the boots vector with observations in a block
}
tmp <- tmp[1:n,]
boot_coeff[i,] <- cor(tmp[,1],tmp[,2])
if(i%%1000==0) print(i)
}
#----
# Histogram
#----
hist(boot_coeff, xlab="Coefficient", main=paste0("Block Bootstrapped Correlation"),
breaks="FD",col="gray")
abline(v=quantile(boot_coeff, 0.5),col="red", lwd=2,lty=1)
abline(v=quantile(boot_coeff, 0.025),col="red", lwd=2,lty=2)
abline(v=quantile(boot_coeff, 0.975),col="red", lwd=2, lty=2)
abline(v=cor(data[,1],data[,2]) ,col="blue", lwd=2, lty=2)
return(list(mean(boot_coeff),quantile(boot_coeff, 0.5),quantile(boot_coeff, 0.025),quantile(boot_coeff, 0.975)))
}
devtools::document()
devtools::document()
data <- matrix(rnorm(300),300,2)                      # initially noise
data[-1,1] <- data[-1,2] + data[-300,1]   # introduce auto-correlation
data[-1,2] <- data[-5,2] + data[-100,2]   #
block.bs <- function(k, B, data){
#k <- 12 #size of blocks
#B <- 100000 #number of bootstraps
set.seed(81)
n <- nrow(data) #sample size
s <- ceiling(n/k) #number of blocks in each bootstraps
# Matrix to store the results
boot_coeff <- matrix(NA,B,1)
# Loop for block bootstrapping
for(i in 1:B) {
tmp <- matrix(NA,s*k, ncol(data))
for(j in 1:s){
t <- sample(k:n, size=1) #last point of time
tmp[(j-1)*k+1:k,] <-  data[t-(k:1)+1,] #fill the boots vector with observations in a block
}
tmp <- tmp[1:n,]
boot_coeff[i,] <- cor(tmp[,1],tmp[,2])
if(i%%1000==0) print(i)
}
#----
# Histogram
#----
hist(boot_coeff, xlab="Coefficient", main=paste0("Block Bootstrapped Correlation"),
breaks="FD",col="gray")
abline(v=quantile(boot_coeff, 0.5),col="red", lwd=2,lty=1)
abline(v=quantile(boot_coeff, 0.025),col="red", lwd=2,lty=2)
abline(v=quantile(boot_coeff, 0.975),col="red", lwd=2, lty=2)
abline(v=cor(data[,1],data[,2]) ,col="blue", lwd=2, lty=2)
return(list(mean(boot_coeff),quantile(boot_coeff, 0.5),quantile(boot_coeff, 0.025),quantile(boot_coeff, 0.975)))
}
block.bs(k=2, B=10000, data=data)
block_boots <- function(k, B, data){
#k <- 12 #size of blocks
#B <- 100000 #number of bootstraps
set.seed(81)
n <- nrow(data) #sample size
s <- ceiling(n/k) #number of blocks in each bootstraps
# Matrix to store the results
boot_coeff <- matrix(NA,B,1)
# Loop for block bootstrapping
for(i in 1:B) {
tmp <- matrix(NA,s*k, ncol(data))
for(j in 1:s){
t <- sample(k:n, size=1) #last point of time
tmp[(j-1)*k+1:k,] <-  data[t-(k:1)+1,] #fill the boots vector with observations in a block
}
tmp <- tmp[1:n,]
boot_coeff[i,] <- cor(tmp[,1],tmp[,2])
if(i%%1000==0) print(i)
}
#----
# Histogram
#----
hist(boot_coeff, xlab="Coefficient", main=paste0("Block Bootstrapped Correlation"),
breaks="FD",col="gray")
abline(v=quantile(boot_coeff, 0.5),col="red", lwd=2,lty=1)
abline(v=quantile(boot_coeff, 0.025),col="red", lwd=2,lty=2)
abline(v=quantile(boot_coeff, 0.975),col="red", lwd=2, lty=2)
abline(v=cor(data[,1],data[,2]) ,col="blue", lwd=2, lty=2)
return(list(mean(boot_coeff),quantile(boot_coeff, 0.5),quantile(boot_coeff, 0.025),quantile(boot_coeff, 0.975)))
}
data <- matrix(rnorm(300),300,2)                      # initially noise
data[-1,1] <- data[-1,2] + data[-300,1]   # introduce auto-correlation
data[-1,2] <- data[-5,2] + data[-100,2]   # introduce auto-correlation
block_boots(k=2, B=10000, data=data)
data <- uclanomics::cbind(Money_demand[,2],Money_demand[,4])
data <- uclanomics::c(Money_demand[,2],Money_demand[,4])
Money_demand[,2],Money_demand[,4]
data <- cbind(uclanomics::Money_demand[,2],uclanomics::Money_demand[,4])
data
block_boots(k=2, B=10000, data=data)
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
Money_demand <- read.csv("C://Users//marco//Desktop//UCLA//441A Applied Data Managment//Final project//Rproject//uclanomics//Money_Demand.csv", header=TRUE)
Money_demand
usethis::use_data(Money_demand, overwrite = TRUE)
devtools::check()
devtools::check()
data_bb
devtools::check()
devtools::check()
library(devtools)
devtools::check()
devtools::check()
devtools::check()
usethis::use_package("uclanomics")
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("marcovaas/MarcoUCLA")
3
devtools::install_github("marcovaas/MarcoUCLA")
devtools::install_github("marcovaas/MarcoUCLA")
devtools::install_github("marcovaas/MarcoUCLA", force=TRUE)
devtools::install_github("marcovaas/MarcoUCLA")
devtools::install_github("marcovaas/MarcoUCLA", force=TRUE)
library(uclanomics)
detach("package:uclanomics", unload = TRUE)
library(devtools)
library(roxygen2)
devtools::install_github("marcovaas/MarcoUCLA", force=TRUE)
remove.packages("uclanomics")
devtools::install_github("marcovaas/MarcoUCLA", force=TRUE)
install.packages("digest")
install.packages("digest")
library(digest)
devtools::install_github("marcovaas/MarcoUCLA", force=TRUE)
